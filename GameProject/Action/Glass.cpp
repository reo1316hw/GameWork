/*
@brief	インクルード
*/
#include "Glass.h"
#include "InvisibleMeshComponent.h"
#include "MeshComponent.h"
#include "Mesh.h"
#include "Renderer.h"
#include "BoxCollider.h"

/*
@fn		コンストラクタ
@param	_pos ガラス床の座標
@param	_size ガラス床のサイズ
@param	_objectTag ガラス床のタグ
@param	_sceneTag シーンのタグ
*/
Glass::Glass(const Vector3& _pos, const Vector3& _size, const Tag& _objectTag,const SceneBase::Scene _sceneTag) :
	GameObject(_sceneTag,_objectTag)
{
	//GameObjectメンバ変数の初期化
	mTag = _objectTag;
	SetScale(_size);
	SetPosition(_pos);

	mDownCount = 0;

	switch (_sceneTag)
	{
	case SceneBase::Scene::tutorial:

		//生成したGlassの生成時と同じくComponent基底クラスは自動で管理クラスに追加され自動で解放される
		mInvisibleMeshComponent = new InvisibleMeshComponent(this);
		//Rendererクラス内のMesh読み込み関数を利用してMeshをセット(.gpmesh)
		mInvisibleMeshComponent->SetMesh(RENDERER->GetMesh("Assets/box_02.gpmesh"));

		// 当たり判定
		mMesh = new Mesh;
		mMesh = RENDERER->GetMesh("Assets/box_02.gpmesh");
		mBoxcollider = new BoxCollider(this, ColliderTag::glassTag, GetOnCollisionFunc());
		mBoxcollider->SetObjectBox(mMesh->GetBox());

		break;
	case SceneBase::Scene::stage01:

		//生成したGlassの生成時と同じくComponent基底クラスは自動で管理クラスに追加され自動で解放される
		mInvisibleMeshComponent = new InvisibleMeshComponent(this);
		//Rendererクラス内のMesh読み込み関数を利用してMeshをセット(.gpmesh)
		mInvisibleMeshComponent->SetMesh(RENDERER->GetMesh("Assets/box_09.gpmesh"));

		// 当たり判定
		mMesh = new Mesh;
		mMesh = RENDERER->GetMesh("Assets/box_09.gpmesh");
		mBoxcollider = new BoxCollider(this, ColliderTag::glassTag, GetOnCollisionFunc());
		mBoxcollider->SetObjectBox(mMesh->GetBox());

		break;
	case SceneBase::Scene::stage02:

		//生成したGlassの生成時と同じくComponent基底クラスは自動で管理クラスに追加され自動で解放される
		mInvisibleMeshComponent = new InvisibleMeshComponent(this);
		//Rendererクラス内のMesh読み込み関数を利用してMeshをセット(.gpmesh)
		mInvisibleMeshComponent->SetMesh(RENDERER->GetMesh("Assets/box_14.gpmesh"));

		// 当たり判定
		mMesh = new Mesh;
		mMesh = RENDERER->GetMesh("Assets/box_14.gpmesh");
		mBoxcollider = new BoxCollider(this, ColliderTag::glassTag, GetOnCollisionFunc());
		mBoxcollider->SetObjectBox(mMesh->GetBox());

		break;
	}
}

/*
@fn		ガラス床のアップデート
@param	_deltaTime 最後のフレームを完了するのに要した時間
*/
void Glass::UpdateGameObject(float _deltaTime)
{
	if (Player::GetRespawnFlag())
	{
		mHitFlag = false;
		mDownCount = 0;
		mVelocity.y = 0;
		mPosition.y = 0;
	}

	if (mHitFlag)
	{
		mDownCount++;
	}

	if (mDownCount >= 15)
	{
		mVelocity.y = -DOWN_SPEED;
	}

	// 常に座標に速度を足す
	mPosition += mVelocity;

	SetPosition(mPosition);
}

/*
@fn		ガラス床がヒットした時の処理
@param	_hitObject ヒットした対象のゲームオブジェクトのアドレス
*/
void Glass::OnCollision(const GameObject& _hitObject)
{
	mHitFlag = true;
}
